{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/SemesterV/DebugMiddleware/lib/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\n// Check if Supabase environment variables are available\nexport const isSupabaseConfigured =\n  typeof process.env.NEXT_PUBLIC_SUPABASE_URL === \"string\" &&\n  process.env.NEXT_PUBLIC_SUPABASE_URL.length > 0 &&\n  typeof process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY === \"string\" &&\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.length > 0\n\nexport async function updateSession(request: NextRequest) {\n  // If Supabase is not configured, just continue without auth\n  if (!isSupabaseConfigured) {\n    return NextResponse.next()\n  }\n\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  try {\n    const supabase = createServerClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          getAll() {\n            return request.cookies.getAll()\n          },\n          setAll(cookiesToSet) {\n            supabaseResponse = NextResponse.next({\n              request: {\n                headers: request.headers,\n              },\n            })\n            cookiesToSet.forEach(({ name, value, options }) =>\n              supabaseResponse.cookies.set(name, value, options)\n            )\n          },\n        },\n      }\n    )\n\n    // IMPORTANT: DO NOT REMOVE auth.getUser()\n    // This call refreshes expired Auth tokens and stores them in cookies\n    await supabase.auth.getUser()\n  } catch (error) {\n    // If there's an error refreshing the session, log it but continue\n    console.error('Error updating session:', error)\n    // Return the response even if session refresh failed\n  }\n\n  return supabaseResponse\n}\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;;;AAGO,MAAM,uBACX,OAAO,QAAQ,GAAG,CAAC,wBAAwB,KAAK,YAChD,QAAQ,GAAG,CAAC,wBAAwB,CAAC,MAAM,GAAG,KAC9C,OAAO,QAAQ,GAAG,CAAC,6BAA6B,KAAK,YACrD,QAAQ,GAAG,CAAC,6BAA6B,CAAC,MAAM,GAAG;AAE9C,eAAe,cAAc,OAAoB;IACtD,4DAA4D;IAC5D,IAAI,CAAC,sBAAsB;QACzB,OAAO,uPAAY,CAAC,IAAI;IAC1B;IAEA,IAAI,mBAAmB,uPAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAEA,IAAI;QACF,MAAM,WAAW,IAAA,uOAAkB,EACjC,QAAQ,GAAG,CAAC,wBAAwB,EACpC,QAAQ,GAAG,CAAC,6BAA6B,EACzC;YACE,SAAS;gBACP;oBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;gBAC/B;gBACA,QAAO,YAAY;oBACjB,mBAAmB,uPAAY,CAAC,IAAI,CAAC;wBACnC,SAAS;4BACP,SAAS,QAAQ,OAAO;wBAC1B;oBACF;oBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;gBAE9C;YACF;QACF;QAGF,0CAA0C;QAC1C,qEAAqE;QACrE,MAAM,SAAS,IAAI,CAAC,OAAO;IAC7B,EAAE,OAAO,OAAO;QACd,kEAAkE;QAClE,QAAQ,KAAK,CAAC,2BAA2B;IACzC,qDAAqD;IACvD;IAEA,OAAO;AACT"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/SemesterV/DebugMiddleware/middleware.ts"],"sourcesContent":["import { updateSession } from '@/lib/supabase/middleware'\nimport { type NextRequest } from 'next/server'\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,eAAe,WAAW,OAAoB;IACnD,OAAO,MAAM,IAAA,sLAAa,EAAC;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}